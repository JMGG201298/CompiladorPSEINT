/* The following code was generated by JFlex 1.4.3 on 16/11/19 06:38 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/11/19 06:38 PM from the specification file
 * <tt>C:/Users/gugj9/OneDrive/Documentos/ITSUR/Metodos_Numericos/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\2\0\1\1\22\0\1\1\4\0\1\46\1\0"+
    "\1\43\1\44\1\45\2\46\1\1\1\15\1\11\1\7\1\3\11\3"+
    "\1\20\1\17\1\12\1\14\1\13\2\0\1\5\1\36\1\24\1\40"+
    "\1\34\1\21\1\31\1\37\1\25\2\2\1\30\1\33\1\23\1\27"+
    "\1\4\1\41\1\6\1\35\1\32\1\22\1\42\2\2\1\16\1\2"+
    "\4\0\1\2\1\0\1\5\1\36\1\24\1\40\1\34\1\21\1\31"+
    "\1\37\1\25\2\2\1\30\1\33\1\23\1\26\1\4\1\41\1\6"+
    "\1\35\1\32\1\22\1\42\4\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\3\1\5\1\6"+
    "\1\5\3\7\1\10\1\11\1\12\13\3\1\1\1\13"+
    "\1\14\1\0\3\3\1\15\1\16\3\3\1\17\5\3"+
    "\1\20\5\3\1\0\1\21\1\0\1\22\20\3\1\23"+
    "\1\3\1\0\1\24\12\3\1\25\3\3\1\26\5\3"+
    "\1\4\2\3\1\27\5\3\1\30\5\3\1\31\1\32"+
    "\23\3\1\33\1\34\1\35\4\3\1\36\12\3\1\37"+
    "\1\40\1\41\1\42\1\43\1\3\1\44\5\3\1\45"+
    "\1\3\1\46\1\3\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\47\0\47\0\u015f\0\u0186\0\47\0\165\0\47"+
    "\0\47\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297"+
    "\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381\0\47\0\u03a8"+
    "\0\u03cf\0\u03f6\0\u041d\0\u0444\0\47\0\u046b\0\u0492\0\u04b9"+
    "\0\165\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0618\0\u063f\0\u0666\0\u035a\0\u035a\0\u068d\0\u03a8"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5"+
    "\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\165\0\u0924\0\u094b\0\165\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\165\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\165\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\47\0\u0c30\0\u0c57\0\165\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3"+
    "\0\u0d1a\0\165\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\165"+
    "\0\165\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee"+
    "\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026"+
    "\0\u104d\0\u1074\0\u109b\0\u10c2\0\165\0\165\0\165\0\u10e9"+
    "\0\u1110\0\u1137\0\u115e\0\165\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\165\0\165"+
    "\0\165\0\165\0\165\0\u130b\0\165\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\165\0\u13f5\0\165\0\u141c\0\165\0\165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\17\1\20"+
    "\1\21\1\22\1\4\1\23\1\24\2\4\1\17\1\25"+
    "\2\4\1\26\1\27\1\30\1\4\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\13\50\0\1\3\47\0"+
    "\5\4\7\0\1\4\2\0\22\4\7\0\1\5\5\0"+
    "\1\40\37\0\3\4\1\41\1\4\7\0\1\4\2\0"+
    "\22\4\6\0\5\4\7\0\1\4\2\0\7\4\1\42"+
    "\12\4\6\0\5\4\7\0\1\4\2\0\13\4\1\43"+
    "\6\4\13\0\1\44\53\0\1\16\1\45\45\0\1\16"+
    "\34\0\3\4\1\46\1\4\7\0\1\4\2\0\1\4"+
    "\1\47\2\4\1\50\15\4\6\0\5\4\7\0\1\4"+
    "\2\0\5\4\2\51\13\4\6\0\5\4\7\0\1\4"+
    "\2\0\5\4\2\52\13\4\6\0\5\4\7\0\1\4"+
    "\2\0\13\4\1\53\6\4\6\0\5\4\7\0\1\4"+
    "\2\0\4\4\1\54\15\4\6\0\5\4\7\0\1\4"+
    "\2\0\2\4\1\55\11\4\1\56\5\4\6\0\5\4"+
    "\7\0\1\4\2\0\4\4\1\57\6\4\1\60\6\4"+
    "\6\0\3\4\1\61\1\4\7\0\1\4\2\0\22\4"+
    "\6\0\5\4\7\0\1\4\2\0\13\4\1\62\6\4"+
    "\6\0\5\4\7\0\1\4\2\0\1\4\1\63\20\4"+
    "\6\0\5\4\7\0\1\4\2\0\13\4\1\64\6\4"+
    "\4\0\10\65\1\0\32\65\1\66\3\65\15\0\1\67"+
    "\34\0\1\70\45\0\4\4\1\71\7\0\1\4\2\0"+
    "\22\4\6\0\5\4\7\0\1\4\2\0\10\4\1\72"+
    "\11\4\6\0\2\4\1\73\2\4\7\0\1\4\2\0"+
    "\22\4\4\0\10\44\1\0\36\44\2\0\5\4\7\0"+
    "\1\4\2\0\7\4\1\74\12\4\6\0\5\4\7\0"+
    "\1\4\2\0\2\4\1\75\17\4\6\0\5\4\7\0"+
    "\1\4\2\0\2\4\1\76\17\4\6\0\5\4\7\0"+
    "\1\4\2\0\2\4\1\77\17\4\6\0\5\4\7\0"+
    "\1\4\2\0\13\4\1\100\6\4\6\0\5\4\7\0"+
    "\1\4\2\0\13\4\1\101\6\4\6\0\5\4\7\0"+
    "\1\4\2\0\11\4\1\102\10\4\6\0\5\4\7\0"+
    "\1\4\2\0\3\4\1\103\16\4\6\0\5\4\7\0"+
    "\1\4\2\0\2\4\1\104\17\4\6\0\5\4\7\0"+
    "\1\4\2\0\10\4\1\105\11\4\6\0\5\4\7\0"+
    "\1\4\2\0\3\4\1\106\10\4\1\107\5\4\6\0"+
    "\5\4\7\0\1\4\2\0\5\4\2\110\13\4\6\0"+
    "\5\4\7\0\1\4\2\0\13\4\1\111\6\4\6\0"+
    "\4\4\1\112\7\0\1\4\2\0\22\4\7\0\1\113"+
    "\45\0\3\4\1\114\1\4\7\0\1\4\2\0\22\4"+
    "\6\0\5\4\7\0\1\4\2\0\5\4\2\115\13\4"+
    "\6\0\5\4\7\0\1\4\2\0\13\4\1\116\6\4"+
    "\6\0\5\4\7\0\1\4\2\0\14\4\1\117\5\4"+
    "\6\0\5\4\7\0\1\4\2\0\3\4\1\120\16\4"+
    "\6\0\2\4\1\121\1\122\1\4\7\0\1\4\2\0"+
    "\1\123\11\4\1\124\1\4\1\125\5\4\6\0\2\4"+
    "\1\126\2\4\7\0\1\4\2\0\22\4\6\0\4\4"+
    "\1\127\7\0\1\4\2\0\22\4\6\0\5\4\7\0"+
    "\1\4\2\0\2\4\1\130\17\4\6\0\5\4\7\0"+
    "\1\4\2\0\5\4\2\131\13\4\6\0\4\4\1\132"+
    "\7\0\1\4\2\0\22\4\6\0\5\4\7\0\1\4"+
    "\2\0\5\4\2\133\13\4\6\0\5\4\7\0\1\4"+
    "\2\0\1\4\1\134\20\4\6\0\5\4\7\0\1\4"+
    "\2\0\13\4\1\135\6\4\6\0\5\4\7\0\1\4"+
    "\2\0\11\4\1\136\10\4\6\0\5\4\7\0\1\4"+
    "\2\0\11\4\1\137\10\4\6\0\5\4\7\0\1\4"+
    "\2\0\17\4\1\140\2\4\7\0\1\113\41\0\1\141"+
    "\3\0\4\4\1\142\7\0\1\4\2\0\22\4\6\0"+
    "\5\4\7\0\1\4\2\0\11\4\1\143\10\4\6\0"+
    "\5\4\7\0\1\4\2\0\5\4\2\144\13\4\6\0"+
    "\5\4\7\0\1\4\2\0\4\4\1\145\15\4\6\0"+
    "\3\4\1\146\1\4\7\0\1\4\2\0\22\4\6\0"+
    "\5\4\7\0\1\4\2\0\7\4\1\147\12\4\6\0"+
    "\5\4\7\0\1\4\2\0\1\4\1\150\20\4\6\0"+
    "\5\4\7\0\1\4\2\0\4\4\1\151\15\4\6\0"+
    "\5\4\7\0\1\4\2\0\4\4\1\152\6\4\1\153"+
    "\6\4\6\0\3\4\1\154\1\4\7\0\1\4\2\0"+
    "\22\4\6\0\5\4\7\0\1\4\2\0\11\4\1\155"+
    "\10\4\6\0\5\4\7\0\1\4\2\0\2\4\1\156"+
    "\17\4\6\0\5\4\7\0\1\4\2\0\4\4\1\157"+
    "\15\4\6\0\5\4\7\0\1\4\2\0\2\4\1\160"+
    "\17\4\6\0\4\4\1\161\7\0\1\4\2\0\22\4"+
    "\6\0\3\4\1\162\1\4\7\0\1\4\2\0\22\4"+
    "\6\0\4\4\1\163\7\0\1\4\2\0\22\4\6\0"+
    "\3\4\1\164\1\4\7\0\1\4\2\0\22\4\6\0"+
    "\5\4\7\0\1\4\2\0\4\4\1\165\15\4\6\0"+
    "\5\4\7\0\1\4\2\0\4\4\1\166\15\4\6\0"+
    "\5\4\7\0\1\4\2\0\5\4\2\167\13\4\6\0"+
    "\4\4\1\170\7\0\1\4\2\0\22\4\6\0\5\4"+
    "\7\0\1\4\2\0\10\4\1\171\11\4\6\0\5\4"+
    "\7\0\1\4\2\0\2\4\1\172\17\4\6\0\5\4"+
    "\7\0\1\4\2\0\13\4\1\173\6\4\6\0\5\4"+
    "\7\0\1\4\2\0\10\4\1\174\11\4\6\0\5\4"+
    "\7\0\1\4\2\0\14\4\1\175\5\4\6\0\4\4"+
    "\1\176\7\0\1\4\2\0\22\4\6\0\5\4\7\0"+
    "\1\4\2\0\3\4\1\177\16\4\6\0\5\4\7\0"+
    "\1\4\2\0\15\4\1\200\4\4\6\0\5\4\7\0"+
    "\1\4\2\0\20\4\1\201\1\4\6\0\5\4\7\0"+
    "\1\4\2\0\5\4\2\202\13\4\6\0\5\4\7\0"+
    "\1\4\2\0\17\4\1\203\2\4\6\0\5\4\7\0"+
    "\1\4\2\0\11\4\1\204\10\4\6\0\4\4\1\205"+
    "\7\0\1\4\2\0\22\4\6\0\5\4\7\0\1\4"+
    "\2\0\2\4\1\206\17\4\6\0\3\4\1\207\1\4"+
    "\7\0\1\4\2\0\22\4\6\0\5\4\7\0\1\4"+
    "\2\0\5\4\2\210\13\4\6\0\5\4\7\0\1\4"+
    "\2\0\3\4\1\211\16\4\6\0\5\4\7\0\1\4"+
    "\2\0\2\4\1\212\17\4\6\0\5\4\7\0\1\4"+
    "\2\0\1\4\1\213\20\4\6\0\5\4\7\0\1\4"+
    "\2\0\5\4\2\214\13\4\6\0\3\4\1\215\1\4"+
    "\7\0\1\4\2\0\22\4\6\0\5\4\7\0\1\4"+
    "\2\0\13\4\1\216\6\4\6\0\5\4\7\0\1\4"+
    "\2\0\4\4\1\217\15\4\6\0\5\4\7\0\1\4"+
    "\2\0\1\4\1\220\20\4\6\0\5\4\7\0\1\4"+
    "\2\0\12\4\1\221\7\4\6\0\5\4\7\0\1\4"+
    "\2\0\13\4\1\222\6\4\6\0\5\4\7\0\1\4"+
    "\2\0\12\4\1\223\7\4\6\0\4\4\1\224\7\0"+
    "\1\4\2\0\22\4\6\0\5\4\7\0\1\4\2\0"+
    "\4\4\1\225\15\4\6\0\5\4\7\0\1\4\2\0"+
    "\11\4\1\226\10\4\6\0\5\4\7\0\1\4\2\0"+
    "\2\4\1\227\17\4\6\0\5\4\7\0\1\4\2\0"+
    "\14\4\1\230\5\4\6\0\5\4\7\0\1\4\2\0"+
    "\14\4\1\231\5\4\6\0\4\4\1\232\7\0\1\4"+
    "\2\0\22\4\6\0\5\4\7\0\1\4\2\0\13\4"+
    "\1\233\6\4\6\0\5\4\7\0\1\4\2\0\5\4"+
    "\2\234\13\4\6\0\4\4\1\117\7\0\1\4\2\0"+
    "\22\4\6\0\5\4\7\0\1\4\2\0\5\4\2\235"+
    "\13\4\6\0\5\4\7\0\1\4\2\0\4\4\1\236"+
    "\15\4\6\0\5\4\7\0\1\4\2\0\5\4\2\237"+
    "\13\4\6\0\4\4\1\240\7\0\1\4\2\0\22\4"+
    "\6\0\5\4\7\0\1\4\2\0\17\4\1\241\2\4"+
    "\6\0\5\4\7\0\1\4\2\0\11\4\1\242\10\4"+
    "\6\0\5\4\7\0\1\4\2\0\2\4\1\243\17\4"+
    "\6\0\3\4\1\244\1\4\7\0\1\4\2\0\22\4"+
    "\6\0\5\4\7\0\1\4\2\0\5\4\2\245\13\4"+
    "\6\0\5\4\7\0\1\4\2\0\12\4\1\246\7\4"+
    "\6\0\5\4\7\0\1\4\2\0\14\4\1\247\5\4"+
    "\6\0\5\4\7\0\1\4\2\0\5\4\2\250\13\4"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5187];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\2\1\1\11\1\1\2\11"+
    "\15\1\1\11\1\0\4\1\1\11\17\1\1\0\1\1"+
    "\1\0\23\1\1\0\25\1\1\11\107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { lexeme=yytext(); return ID;
          }
        case 41: break;
        case 38: 
          { lexeme=yytext(); return PRDO;
          }
        case 42: break;
        case 30: 
          { lexeme=yytext(); return CPSO;
          }
        case 43: break;
        case 4: 
          { lexeme=yytext(); return NE;
          }
        case 44: break;
        case 17: 
          { lexeme=yytext(); return STR;
          }
        case 45: break;
        case 28: 
          { lexeme=yytext(); return PRFUN;
          }
        case 46: break;
        case 21: 
          { lexeme=yytext(); return PRLR;
          }
        case 47: break;
        case 11: 
          { lexeme=yytext(); return PA;
          }
        case 48: break;
        case 31: 
          { lexeme=yytext(); return FSN;
          }
        case 49: break;
        case 9: 
          { lexeme=yytext(); return PYC;
          }
        case 50: break;
        case 20: 
          { lexeme=yytext(); return PRPA;
          }
        case 51: break;
        case 6: 
          { lexeme=yytext(); return SL;
          }
        case 52: break;
        case 39: 
          { lexeme=yytext(); return FMS;
          }
        case 53: break;
        case 16: 
          { lexeme=yytext(); return PRSI;
          }
        case 54: break;
        case 22: 
          { lexeme=yytext(); return PRSO;
          }
        case 55: break;
        case 5: 
          { lexeme=yytext(); return OAS;
          }
        case 56: break;
        case 36: 
          { lexeme=yytext(); return PRAO;
          }
        case 57: break;
        case 12: 
          { lexeme=yytext(); return PCD;
          }
        case 58: break;
        case 27: 
          { lexeme=yytext(); return PRRR;
          }
        case 59: break;
        case 26: 
          { lexeme=yytext(); return PRHR;
          }
        case 60: break;
        case 33: 
          { lexeme=yytext(); return PRES;
          }
        case 61: break;
        case 25: 
          { lexeme=yytext(); return PRSN;
          }
        case 62: break;
        case 10: 
          { lexeme=yytext(); return DP;
          }
        case 63: break;
        case 32: 
          { lexeme=yytext(); return PRMS;
          }
        case 64: break;
        case 37: 
          { lexeme=yytext(); return FFN;
          }
        case 65: break;
        case 8: 
          { lexeme=yytext(); return OL;
          }
        case 66: break;
        case 14: 
          { lexeme=yytext(); return PRAN;
          }
        case 67: break;
        case 24: 
          { lexeme=yytext(); return FI;
          }
        case 68: break;
        case 7: 
          { lexeme=yytext(); return OR;
          }
        case 69: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 70: break;
        case 18: 
          { lexeme=yytext(); return NF;
          }
        case 71: break;
        case 29: 
          { lexeme=yytext(); return FPA;
          }
        case 72: break;
        case 19: 
          { lexeme=yytext(); return PRQE;
          }
        case 73: break;
        case 40: 
          { lexeme=yytext(); return PRFO;
          }
        case 74: break;
        case 13: 
          { lexeme=yytext(); return CS;
          }
        case 75: break;
        case 35: 
          { lexeme=yytext(); return PRHE;
          }
        case 76: break;
        case 15: 
          { lexeme=yytext(); return PRNO;
          }
        case 77: break;
        case 23: 
          { lexeme=yytext(); return VL;
          }
        case 78: break;
        case 2: 
          { /*Ignore*/
          }
        case 79: break;
        case 34: 
          { lexeme=yytext(); return PRER;
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
